// Code generated by entc, DO NOT EDIT.

package ent

import (
	"cipher-bot/ent/request"
	"cipher-bot/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Request is the model entity for the Request schema.
type Request struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	// timestamp of creation
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	// timestamp of last entity update
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Status holds the value of the "status" field.
	Status request.Status `json:"status,omitempty"`
	// Type holds the value of the "type" field.
	Type request.Type `json:"type,omitempty"`
	// Algorithm holds the value of the "algorithm" field.
	Algorithm *request.Algorithm `json:"algorithm,omitempty"`
	// KeyMode holds the value of the "key_mode" field.
	KeyMode *request.KeyMode `json:"key_mode,omitempty"`
	// ManualKeyValidation holds the value of the "manual_key_validation" field.
	ManualKeyValidation *bool `json:"manual_key_validation,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RequestQuery when eager-loading is set.
	Edges RequestEdges `json:"edges"`
}

// RequestEdges holds the relations/edges for other nodes in the graph.
type RequestEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RequestEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Request) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case request.FieldManualKeyValidation:
			values[i] = new(sql.NullBool)
		case request.FieldID, request.FieldUserID:
			values[i] = new(sql.NullInt64)
		case request.FieldStatus, request.FieldType, request.FieldAlgorithm, request.FieldKeyMode:
			values[i] = new(sql.NullString)
		case request.FieldCreatedAt, request.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Request", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Request fields.
func (r *Request) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case request.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case request.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case request.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case request.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				r.Status = request.Status(value.String)
			}
		case request.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				r.Type = request.Type(value.String)
			}
		case request.FieldAlgorithm:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field algorithm", values[i])
			} else if value.Valid {
				r.Algorithm = new(request.Algorithm)
				*r.Algorithm = request.Algorithm(value.String)
			}
		case request.FieldKeyMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key_mode", values[i])
			} else if value.Valid {
				r.KeyMode = new(request.KeyMode)
				*r.KeyMode = request.KeyMode(value.String)
			}
		case request.FieldManualKeyValidation:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field manual_key_validation", values[i])
			} else if value.Valid {
				r.ManualKeyValidation = new(bool)
				*r.ManualKeyValidation = value.Bool
			}
		case request.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				r.UserID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Request entity.
func (r *Request) QueryUser() *UserQuery {
	return (&RequestClient{config: r.config}).QueryUser(r)
}

// Update returns a builder for updating this Request.
// Note that you need to call Request.Unwrap() before calling this method if this Request
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Request) Update() *RequestUpdateOne {
	return (&RequestClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Request entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Request) Unwrap() *Request {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Request is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Request) String() string {
	var builder strings.Builder
	builder.WriteString("Request(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", r.Status))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", r.Type))
	if v := r.Algorithm; v != nil {
		builder.WriteString(", algorithm=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := r.KeyMode; v != nil {
		builder.WriteString(", key_mode=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	if v := r.ManualKeyValidation; v != nil {
		builder.WriteString(", manual_key_validation=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", user_id=")
	builder.WriteString(fmt.Sprintf("%v", r.UserID))
	builder.WriteByte(')')
	return builder.String()
}

// Requests is a parsable slice of Request.
type Requests []*Request

func (r Requests) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
